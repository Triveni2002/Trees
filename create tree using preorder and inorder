class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        Map<Integer,Integer> h=new  HashMap<>();
        for(int i=0;i<inorder.length;i++){
            h.put(inorder[i],i);
        }
          TreeNode root=dTree( preorder,0,preorder.length-1,inorder,0,inorder.length-1, h);
         return root;
    }
    public TreeNode dTree(int[] preorder,int preStart,int preEnd,int[] inorder,int inStart,int inEnd, Map<Integer,Integer> h){
        if(preStart>preEnd || inStart>inEnd) return null;
        TreeNode root=new TreeNode(preorder[preStart]);
        int inRoot=h.get(root.val);
        int numsLeft=inRoot-inStart;
        root.left=dTree(preorder,preStart+1,preStart+numsLeft,inorder,inStart,inRoot-1,h);
        root.right=dTree(preorder,preStart+numsLeft+1,preEnd,inorder,inRoot+1,inEnd,h);
        return root;
    }
}
