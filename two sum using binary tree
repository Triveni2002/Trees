 class BSTIterator{
     private Stack<TreeNode> stack = new Stack<>();
     boolean reverse = true;
     BSTIterator(TreeNode root,boolean isReverse){
        reverse = isReverse;
        pushAll(root);
     }
     public boolean hasNext(){
         return !stack.isEmpty();
     }
     public int next(){
         TreeNode node=stack.pop();
         if(!reverse){
             pushAll(node.right);
        }
        else{
            pushAll(node.left);
        }
         return node.val;
     }
     public void pushAll(TreeNode node){
        while(node!=null){
            stack.push(node);
            if(reverse==true){
                node=node.right;
            }
            else{
                node=node.left;
            }
        }
     }
 }
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        if(root==null) return false;
        BSTIterator l=new BSTIterator(root,false);
        BSTIterator r=new BSTIterator(root,true);
        int i=l.next();
        int j=r.next();
        while(i<j){
            if(i+j==k){
                return true;
            }else if(i+j>k){
                j=r.next();
            }
            else{
                i=l.next();
            }
        }
        return false;
    }
}
