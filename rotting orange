class Solution {
    public int orangesRotting(int[][] grid) {
         int rowl=grid.length;
        int coll=grid[0].length;
        Queue<Pair> q=new LinkedList<>() ;
        for(int i=0;i<rowl;i++) {
            for(int j=0;j<coll;j++) {
                if(grid[i][j]==2) 
                    q.add(new Pair(i, j, 0))  ;
            }
        }
        int tm=0;
        int drow[] = {-1, 0, +1, 0};
        int dcol[] = {0, 1, 0, -1}; 
        int cnt = 0;
        while(!q.isEmpty()) {
            int s=q.size() ;
            for(int i=1;i<=s;i++) {
                Pair p=q.poll() ;
                int r=p.row;
                int c=p.col;
                int t=p.tm;
                tm=Math.max(tm, t) ;
                for(int j=0;j<4;j++) {
                    int nr=r+drow[j];
                    int nc=c+dcol[j];
                     if(nr<0 || nr>=rowl || nc<0 || nc>=coll)
                         continue;
                    if(grid[nr][nc]==1) {
                        q.add(new Pair(nr, nc, t+1) ) ;
                        grid[nr][nc]=2;
                    
                  }
            }
       }
        }
        for (int i = 0; i < rowl; i++) {
      for (int j = 0; j < coll; j++) {
    
        if (grid[i][j] == 1) {
          return -1;
        }
    
                
    }
}
        return tm;
    }
}
     



class Pair {
  int row;
  int col;
  int tm;
  Pair(int _row, int _col, int _tm) {
    this.row = _row;
    this.col = _col;
    this.tm = _tm;
  }
}
